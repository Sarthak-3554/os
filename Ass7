#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>

//---------------   NOTE: READ: sizeof()     WRITE:strlen() ------------------------------------- 

int main() 
{
    // Creating the first pipe (pipe1)
    mkfifo("pipe1", 0666);

    char msg[200];

    printf("Enter your message (max 200 characters): ");
    fgets(msg, sizeof(msg), stdin);

    // Opening pipe1
    int pipe1 = open("pipe1", O_WRONLY);

    // Writing the message to pipe1
    write(pipe1, msg, strlen(msg));

    // Closing pipe1
    close(pipe1);

    char output[200];

    // Reading the message from the second pipe (pipe2)
    int pipe2 = open("pipe2", O_RDONLY);

    // Displaying the message
    read(pipe2, output, sizeof(output));
    printf(output);

    return 0;
}



#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>

int main() {
    // Creating the second pipe (pipe2)
    mkfifo("pipe2", 0666);

    char msg[200];

    // Opening pipe1 (created by Code 1)
    int pipe1 = open("pipe1", O_RDONLY);

    // Reading the message from pipe1 (sent by Code 1)
    read(pipe1, msg, sizeof(msg));

    // Counting the number of characters, words, and lines in the message
    int chars = 0, words = 0, lines = 0;

    for (int i = 0; msg[i] != '\0'; i++) {
        if (msg[i] == ' ') {
            words++;
        } else if (msg[i] == '\n') {
            lines++;
            // Increment words because every line starts with a word
            words++;
        } else {
            chars++;
        }
    }

    // Closing pipe1
    close(pipe1);

    char output[200];

    // Format the results
    sprintf(output, "Number of characters: %d\n", chars);
    sprintf(output + strlen(output), "Number of words: %d\n", words);
    sprintf(output + strlen(output), "Number of lines: %d\n", lines);

    // Writing the output into the second pipe (pipe2)
    int pipe2 = open("pipe2", O_WRONLY);
    write(pipe2, output, strlen(output));
    close(pipe2);

    return 0;
}

