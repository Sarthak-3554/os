#include <stdio.h>
#include <stdlib.h>

struct Process 
{
    int id;
    int arrival_time;
    int burst_time;
    int remaining_time;
    int completion_time;
};

void sortByArrivalTime(struct Process p[], int n) 
{
    for (int i = 0; i < n - 1; i++) 
    {
        for (int j = 0; j < n - i - 1; j++) 
        {
            if (p[j].arrival_time > p[j + 1].arrival_time) 
            {
                struct Process temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
        }
    }
}

int findShortestJob(struct Process p[], int n, int current_time) 
{
    int shortestJob = -1;
    int mini = 99999;
    
    for (int i = 0; i < n; i++) 
    {
        if (p[i].arrival_time <= current_time && p[i].remaining_time > 0 && p[i].remaining_time < mini) 
        {
            shortestJob = i;
            mini = p[i].remaining_time;
        }
    }
    
    return shortestJob;
}

void scheduling_sjf()
{
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    for (int i = 0; i < n; i++) 
    {
        p[i].id = i + 1;
        printf("Enter arrival time and burst time for process %d: ", p[i].id);
        scanf("%d %d", &p[i].arrival_time, &p[i].burst_time);
        p[i].remaining_time = p[i].burst_time;
    }

    sortByArrivalTime(p, n);

    int current_time = 0;
    int count = n;

    printf("Gantt Chart:\n");
    while (count > 0) 
    {
        int shortestJob = findShortestJob(p, n, current_time);

        if (shortestJob == -1) 
        {
            current_time++;
            continue;
        }

        p[shortestJob].remaining_time--;
        current_time++;

        if (p[shortestJob].remaining_time == 0) 
        {
            count--;
            p[shortestJob].completion_time = current_time;
        }

        printf("| P%d ", p[shortestJob].id);
    }
    printf("|\n");

    printf("\nProcess\tArrival\tBurst\tCompletion-Time\tTurnaround\tWaiting\n");

    for (int i = 0; i < n; i++) 
    {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", p[i].id, p[i].arrival_time, p[i].burst_time,
               p[i].completion_time, p[i].completion_time - p[i].arrival_time, p[i].completion_time - p[i].arrival_time - p[i].burst_time);
    }
}

int main() 
{
    scheduling_sjf();
    return 0;
}
