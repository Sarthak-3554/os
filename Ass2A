#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

// Function to perform Bubble Sort
void bubbleSort(int arr[], int n) 
{
    int temp, i, j;
    for (i = 0; i < n - 1; i++) 
    {
        for (j = 0; j < n - i - 1; j++) 
        {
            if (arr[j] > arr[j + 1]) 
            {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

// Function to print array
void printArray(int arr[], int n) 
{
    for (int i = 0; i < n; i++)
    {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() 
{
    int n;
    printf("\nEnter the size of Array: ");
    scanf("%d", &n);
    int arr[n];

    // Input array elements
    printf("Enter %d elements: ", n);
    for (int i = 0; i < n; i++) 
    {
        scanf("%d", &arr[i]);
    }

    pid_t p;
    p = fork();

    // Child process
    if (p > 0) 
    {
        printf("\nI am parent...");
        printf("\nMy process ID: %d", getpid());
        printf("\n");

        // Sort the array
        bubbleSort(arr, n);
        printf("\nArray is sorted in Parent Process\n");
        printArray(arr, n);

        // Wait for the child process to complete
        wait(NULL);
    } 
    else if (p == 0) 
    {
        printf("\nI am child...");
        printf("\nMy process ID: %d", getpid());
        printf("\n");

        // Serialize the array
        char str[100]; // String to store the serialized array
        int index = 0;
        for (int i = 0; i < n; i++) 
        {
            // Use sprintf to convert the integer to a string
            index += sprintf(str + index, "%d", arr[i]);
            if (i != n - 1) 
            {
            }
        }

        str[index] = '\0'; // Null-terminate the string
        printf("Serialized array: %s\n");

        // Execute the child process with serialized array as argument
        char* const args[] = {"./child", str, NULL}; // Use "./child" for the local directory
        execve("./child", args, NULL);
        perror("execve");
        exit(1);
    }

    return 0;
}
