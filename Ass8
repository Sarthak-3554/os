#include <stdio.h>
#include <stdlib.h>


//SSTF Algorithm 

int SSTF()

{
    int i, n, seek = 0, head, count = 0;
    
    printf("Enter the number of Requests\n");
    scanf("%d", &n);

    int RQ[n];
    
    printf("Enter the Requests sequence\n");
    
    for (i = 0; i < n; i++)
    {
        scanf("%d", &RQ[i]);
    }
    
    printf("Enter initial head position\n");
    scanf("%d", &head);

    while (count != n)    // run the loop until all request are processed
    {
        int min = 1000, d, index;   // min: used as a reference value for comparison
                                    // d:  used for calculating the difference between head and current

        for (i = 0; i < n; i++)
        {
            d = abs(RQ[i] - head);  

            if (min > d)           // this if condition is used to find the minimum d 
            {
                min = d;
                index = i;         // storing the index number in index variable to mark it visited
            }
        }
        
        seek = seek + min;   // calculating the total seek time
        head = RQ[index];                       


        RQ[index] = 1000;   //If the index is visited make it 1000 so that it isnt visited again

        count++;            // increment the count
    }
    
    
    printf("Total head movement is %d",seek);

    return 0;
    
}


 int main()
   {
    
    int ch,YN;
    
    do{
        //system("clear");
        printf("\n\n\t*********** MENU ***********"); 
        printf("\n\n\t1:SSTF\n\n\t2:EXIT"); 
        printf("\n\n\tEnter your choice: ");
        
        scanf("%d", &ch);

        switch (ch)
        {
            case 1:
		        // for (i = 0; i < f; i++)
		        // {
		        //     F[i] = -1;
		        // }
		        SSTF();
            break;
            
            
            
            
            case 2:
                exit(0);
            
        } 
        
        printf("\n\n\tDo u want to continue IF YES PRESS 1\n\n\tIF NO PRESS 0: ");
        scanf("%d", &YN);
         
    } while (YN == 1);


    return 0;

    }
//SCAN

#include <stdio.h>
#include <stdlib.h>

int no_req, track, head, distance;
int disc_req[100];

void sort() 
{
    int i, j, temp;
    for (i = 0; i < no_req; i++) 
    {
        for (j = 0; j < no_req-i-1; j++) 
        {
            if (disc_req[j] > disc_req[j+1])
             {
                temp = disc_req[i];
                disc_req[i] = disc_req[j];
                disc_req[j] = temp;
            }
        }
    }
}

void scan() 
{

    int index, dir;                    //index variable to find the position of the vraible in the req_seq array that is just smaller than the head
                                       // dir to decode the direction of the variable
    int i;
    
    
     printf("Enter the number of disk requests: ");
     scanf("%d", &no_req);

     printf("Enter the total track capacity: ");
     scanf("%d", &track);

     printf("Enter the initial head position: ");
     scanf("%d", &head);

     printf("Enter the disk requests:\n");
     for (int i = 0; i < no_req; i++) 
     {
         scanf("%d", &disc_req[i]);
                
     }
                
                
    distance = 0;                                      //to store the seek movements
    //head = head;
    
    printf("\nEnter the direction of head\n1 - Toward higher disc (Right)\n0 - Toward lower disc (Left): ");
    scanf("%d", &dir);
    
    sort();                                           //NOTE:  -----------------------SORTING IS THE MOST IMP STEP IN THE SCAN ALGO-------------------------------
    
    
    printf("\nSorted Disc requests are: ");
    for (i = 0; i < no_req; i++) 
    {
        printf("%d ", disc_req[i]);
    }

    i = 0;
    
    while (head >= disc_req[i]) 
    {
        index = i;
        i++;
    }
    
    
    printf("\nindex=%d", index);
    printf("\n%d => ", head);

    if (dir == 1) 
    {
        sort();
        for (i = index + 1; i < no_req; i++) 
        {
            printf("%d => ", disc_req[i]);
            distance += abs(head - disc_req[i]);
            head = disc_req[i];
        }
        distance += abs(head - (track - 1));
        printf("%d => ", track - 1);
        head = track - 1;
        for (i = index; i >= 0; i--) 
        {
            printf("%d => ", disc_req[i]);
            distance += abs(head - disc_req[i]);
            head = disc_req[i];
      }
    } 
    else 
    {
        sort();
        for (i = index; i >= 0; i--) 
        {
            printf("%d => ", disc_req[i]);
            distance += abs(head - disc_req[i]);
            head = disc_req[i];
        }
        distance += abs(head - 0);
        head = 0;
        printf("0 => ");
        for (i = index + 1; i < no_req; i++) 
        {
            printf("%d => ", disc_req[i]);
            distance += abs(head - disc_req[i]);
            head = disc_req[i];
        }
    }
    printf("End");
    printf("\nTotal Distance Traversed = %d", distance);
    
}

int main() 

{

    int choice;
    
    do {
        printf("\nMenu:\n");
        printf("1. SCan\n");
        printf("2. Exit\n");
        
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) 
        {
            case 1:
               

                scan();
                break;

            case 2:
                printf("Exiting the program.\n");
                break;

            default:
                printf("Invalid choice. Please try again.\n");
        }
        
    } while (choice != 2);

    return 0;
    
    
}

//CLOOK



#include <stdio.h>
#include <stdlib.h>

int no_req, track, head, distance;
int disc_req[100];

//----------------------------------------------------CLOOK CODE ----------------------------------------------------------

//*********************   NOTE : Same code aahe as that of scan, fakt ithe shevat paryant jaat nahi 
                      //         as sson as you raech the last request to the right or to the left you change the direction
                      //    and circularly go from back 

void sort() 
{
    int i, j, temp;
    for (i = 0; i < no_req; i++) 
    {
        for (j = 0; j < no_req-i-1; j++) 
        {
            if (disc_req[j] > disc_req[j+1]) 
            {
                temp = disc_req[i];
                disc_req[i] = disc_req[j];
                disc_req[j] = temp;
            }
        }
    }
}



void clook() 

{
    int index, dir;
    int i;
    distance = 0;
    head = head;
    
    printf("\nEnter the direction of head\n1 - Toward higher disc\n0 - Toward lower disc: ");
    scanf("%d", &dir);
    
    sort();
    
    printf("\nSorted Disc requests are: ");
    for (i = 0; i < no_req; i++) 
    {
        printf(" %d", disc_req[i]);
    }

    i = 0;
    
    while (head >= disc_req[i]) 
    {
        index = i;
        i++;
    }
    
    
    printf("\nindex=%d", index);
    printf("\n%d => ", head);
    

    if (dir == 1) 
    {
        sort();
        
        for (i = index + 1; i < no_req; i++) 
        {
            printf("%d => ", disc_req[i]);
            distance += abs(head - disc_req[i]);
            head = disc_req[i];
        }
        
        for (i = 0; i < index; i++) 
        {
            printf("%d => ", disc_req[i]);
            distance += abs(head - disc_req[i]);
            head = disc_req[i];
        }
        
    } 
    
    else 
    {
        sort();
        for (i = index; i >= 0; i--) 
        {
            printf("%d => ", disc_req[i]);
            distance += abs(head - disc_req[i]);
            head = disc_req[i];
        }
        
        for (i = no_req - 1; i > index; i--) 
        {
            printf("%d => ", disc_req[i]);
            distance += abs(head - disc_req[i]);
            head = disc_req[i];
        }
        
    }

    printf("End");
    printf("\nTotal Distance Traversed = %d", distance);
    
    
}

int main() 

{

    int choice;
    
    do 
    {
        printf("\nMenu:\n");
        printf("1. Perform C-LOOK Disk Scheduling\n");
        printf("2. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) 
        {
            case 1:
                printf("Enter the number of disk requests: ");
                scanf("%d", &no_req);

                printf("Enter the total track capacity: ");
                scanf("%d", &track);

                printf("Enter the initial head position: ");
                scanf("%d", &head);

                printf("Enter the disk requests:\n");
                
                for (int i = 0; i < no_req; i++) 
                {
                    scanf("%d", &disc_req[i]);
                }

                clook();
                break;

            case 2:
                printf("Exiting the program.\n");
                break;

            default:
                printf("Invalid choice. Please try again.\n");
        }
        
    } while (choice != 2);

    return 0;
}



