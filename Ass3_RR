#include <stdio.h>
#include <stdlib.h>

struct process
{
    int arrival_time;
    int burst_time;
    int remaining_time;
    int completion_time;
    int id;
};

void scheduling()
{
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct process p[n];

    for (int i = 0; i < n; i++)
    {
        p[i].id = i + 1;

        printf("Enter arrival time for Process %d: ", p[i].id);
        scanf("%d", &p[i].arrival_time);

        printf("Enter burst time for Process %d: ", p[i].id);
        scanf("%d", &p[i].burst_time);

        p[i].remaining_time = p[i].burst_time;
    }

    int time_quantum;
    printf("Enter time quantum: ");
    scanf("%d", &time_quantum);

    int current_time = 0;
    int count = n;

    printf("\nGantt Chart:\n");
    printf("0|");
    
    while (count > 0)
    {
        int executed = 0;
        for (int i = 0; i < n; i++)
        {
            if (p[i].remaining_time > 0)
            {
                if (p[i].remaining_time <= time_quantum)
                {
                    current_time += p[i].remaining_time;
                    p[i].remaining_time = 0;
                    p[i].completion_time = current_time;
                }
                else
                {
                    current_time += time_quantum;
                    p[i].remaining_time -= time_quantum;
                }

                printf("P%d|", p[i].id);

                if (p[i].remaining_time == 0)
                {
                    count--;
                }
                executed = 1;
            }
        }
        
        if (executed == 0)
        {
            current_time++;
            printf("Idle|");
        }
    }
    printf("\n");

    printf("\nProcess\tArrival Time\tBurst Time\tCompletion Time\n");
    for (int i = 0; i < n; i++)
    {
        printf("%d\t\t%d\t\t%d\t\t%d\n", p[i].id, p[i].arrival_time,
               p[i].burst_time, p[i].completion_time);
    }
}

int main()
{
    scheduling();

    return 0;
}
